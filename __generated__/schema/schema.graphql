# Schema generated by Grats (https://grats.capt.dev)
# Do not manually edit. Regenerate by running `npx grats`.
enum CommandersSortBy {
  CONVERSION
  POPULARITY
  TOP_CUTS
}

enum EntriesSortBy {
  NEW
  TOP
}

enum EntrySortBy {
  DATE
  DRAWS
  LOSSES
  STANDING
  WINRATE
  WINS
}

enum SearchResultType {
  COMMANDER
  TOURNAMENT
}

enum SortDirection {
  ASC
  DESC
}

enum TimePeriod {
  ALL_TIME
  ONE_MONTH
  ONE_YEAR
  POST_BAN
  SIX_MONTHS
  THREE_MONTHS
}

enum TournamentSortBy {
  DATE
  PLAYERS
}

interface Node {
  id: ID!
}

input CardEntriesFilters {
  colorId: String
  commanderName: String
  tournamentTID: String
}

input CommanderStatsFilters {
  colorId: String!
  maxDate: String!
  maxSize: Int!
  minDate: String!
  minSize: Int!
  timePeriod: TimePeriod!
}

input EntriesFilter {
  maxStanding: Int!
  minEventSize: Int!
  timePeriod: TimePeriod!
}

input EntryFilters {
  maxDate: String
  maxDraws: Int
  maxLosses: Int
  maxSize: Int
  maxStanding: Int
  maxWins: Int
  minDate: String
  minDraws: Int
  minLosses: Int
  minSize: Int
  minStanding: Int
  minWins: Int
}

input TournamentFilters {
  maxDate: String
  maxSize: Int
  minDate: String
  minSize: Int
  timePeriod: TimePeriod
}

type Card implements Node {
  """Image of the full front card face."""
  cardPreviewImageUrl: String
  cmc: Int
  colorId: String
  entries(after: ID, filters: CardEntriesFilters, first: Int! = 20): EntryConnection
  id: ID!
  """URL's of art crops for each card face."""
  imageUrls: [String!]
  name: String
  oracleId: String
  """Link to the card on Scryfall."""
  scryfallUrl: String
  type: String
}

type CardConnection {
  edges: [CardEdge!]
  pageInfo: PageInfo
}

type CardEdge {
  cursor: String
  node: Card
}

type Commander implements Node {
  breakdownUrl: String
  cards: [Card!]
  colorId: String
  entries(after: ID, filters: EntriesFilter, first: Int! = 20, sortBy: EntriesSortBy! = TOP): EntryConnection
  id: ID!
  name: String
  promo: FirstPartyPromo
  staples(after: ID, first: Int! = 20): CardConnection
  stats(filters: CommanderStatsFilters!): CommanderCalculatedStats
}

type CommanderCalculatedStats {
  conversionRate: Float
  count: Int
  metaShare: Float
  topCuts: Int
}

type CommanderConnection {
  edges: [CommanderEdge!]
  pageInfo: PageInfo
}

type CommanderEdge {
  cursor: String
  node: Commander
}

type Entry implements Node {
  commander: Commander
  decklist: String
  draws: Int
  id: ID!
  losses: Int
  lossesBracket: Int
  lossesSwiss: Int
  maindeck: [Card!]
  player: Player
  standing: Int
  tournament: Tournament
  winRate: Float
  wins: Int
  winsBracket: Int
  winsSwiss: Int
}

type EntryConnection {
  edges: [EntryEdge!]
  pageInfo: PageInfo
}

type EntryEdge {
  cursor: String
  node: Entry
}

type FirstPartyPromo {
  backgroundImageUrl: String
  buttonText: String
  description: [String!]
  href: String
  imageUrl: String
  title: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type Player implements Node {
  conversionRate: Float
  draws: Int
  entries: [Entry!]
  id: ID!
  isKnownCheater: Boolean
  losses: Int
  name: String
  topCuts: Int
  topdeckProfile: String
  winRate: Float
  wins: Int
}

type Query {
  card(name: String!): Card
  cheaters: [Player!]
  commander(name: String!): Commander
  commanders(after: ID, colorId: String, first: Int! = 20, minEntries: Int, minTournamentSize: Int, sortBy: CommandersSortBy! = CONVERSION, timePeriod: TimePeriod! = ONE_MONTH): CommanderConnection
  player(profile: String!): Player
  searchResults(types: [SearchResultType!]!): [SearchResult!]
  staples: [Card!]
  tournament(TID: String!): Tournament
  tournaments(after: ID, first: Int! = 20, maxDate: String, maxSize: Int, minDate: String, minSize: Int, search: String, sortBy: TournamentSortBy! = DATE, timePeriod: TimePeriod): TournamentConnection
}

type SearchResult {
  name: String
  url: String
}

type Tournament implements Node {
  TID: String
  bracketUrl: String
  breakdown: [TournamentBreakdownGroup!]
  entries(commander: String, maxStanding: Int): [Entry!]
  id: ID!
  name: String
  promo: FirstPartyPromo
  size: Int
  swissRounds: Int
  topCut: Int
  tournamentDate: String
}

type TournamentBreakdownGroup {
  commander: Commander
  commanderId: Int
  conversionRate: Float
  entries: Int
  topCuts: Int
}

type TournamentConnection {
  edges: [TournamentEdge!]
  pageInfo: PageInfo
}

type TournamentEdge {
  cursor: String
  node: Tournament
}
