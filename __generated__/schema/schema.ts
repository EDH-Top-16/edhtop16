/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { defaultFieldResolver, GraphQLSchema, GraphQLDirective, DirectiveLocation, GraphQLList, GraphQLInt, GraphQLObjectType, GraphQLString, GraphQLNonNull, GraphQLFloat, GraphQLInputObjectType, GraphQLEnumType, GraphQLID, GraphQLInterfaceType, GraphQLBoolean } from "graphql";
import { createCommanderCardsLoader as createCommanderCardsLoader, commanderStatsLoader as commanderStatsLoader, createCommanderLoader as createCommanderLoader, Commander as queryCommanderResolver, Commander as queryCommandersResolver } from "./../../src/lib/server/schema/commander";
import { id as commanderIdResolver, id as entryIdResolver, id as playerIdResolver, id as tournamentIdResolver, id as cardIdResolver, node as queryNodeResolver } from "./../../src/lib/server/schema/connection";
import { createPlayerLoader as createPlayerLoader, Player as queryCheatersResolver, Player as queryPlayerResolver } from "./../../src/lib/server/schema/player";
import { createTournamentLoader as createTournamentLoader, Tournament as queryTournamentResolver, Tournament as queryTournamentsResolver } from "./../../src/lib/server/schema/tournament";
import { Card as queryCardResolver, createCardLoader as createCardLoader, Card as queryStaplesResolver } from "./../../src/lib/server/schema/card";
import { createEntryLoader as createEntryLoader } from "./../../src/lib/server/schema/entry";
import { searchResults as querySearchResultsResolver } from "./../../src/lib/server/schema/search";
async function assertNonNull<T>(value: T | Promise<T>): Promise<T> {
    const awaited = await value;
    if (awaited == null)
        throw new Error("Cannot return null for semantically non-nullable field.");
    return awaited;
}
export function getSchema(): GraphQLSchema {
    const CommanderCardWinRatePointType: GraphQLObjectType = new GraphQLObjectType({
        name: "CommanderCardWinRatePoint",
        fields() {
            return {
                periodStart: {
                    name: "periodStart",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                winRateWithCard: {
                    name: "winRateWithCard",
                    type: GraphQLFloat
                },
                winRateWithoutCard: {
                    name: "winRateWithoutCard",
                    type: GraphQLFloat
                },
                withCount: {
                    name: "withCount",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                withoutCount: {
                    name: "withoutCount",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const CommanderCardDetailsType: GraphQLObjectType = new GraphQLObjectType({
        name: "CommanderCardDetails",
        fields() {
            return {
                card: {
                    name: "card",
                    type: CardType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                entries: {
                    name: "entries",
                    type: EntryConnectionType,
                    args: {
                        after: {
                            type: GraphQLString
                        },
                        first: {
                            type: new GraphQLNonNull(GraphQLInt),
                            defaultValue: 20
                        }
                    },
                    resolve(source, args) {
                        return assertNonNull(source.entries(args.first, args.after));
                    }
                },
                winRateSeries: {
                    name: "winRateSeries",
                    type: new GraphQLList(new GraphQLNonNull(CommanderCardWinRatePointType)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const TimePeriodType: GraphQLEnumType = new GraphQLEnumType({
        name: "TimePeriod",
        values: {
            ALL_TIME: {
                value: "ALL_TIME"
            },
            ONE_MONTH: {
                value: "ONE_MONTH"
            },
            ONE_YEAR: {
                value: "ONE_YEAR"
            },
            POST_BAN: {
                value: "POST_BAN"
            },
            SIX_MONTHS: {
                value: "SIX_MONTHS"
            },
            THREE_MONTHS: {
                value: "THREE_MONTHS"
            }
        }
    });
    const EntriesFilterType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "EntriesFilter",
        fields() {
            return {
                maxStanding: {
                    name: "maxStanding",
                    type: GraphQLInt
                },
                minEventSize: {
                    name: "minEventSize",
                    type: new GraphQLNonNull(GraphQLInt)
                },
                timePeriod: {
                    name: "timePeriod",
                    type: new GraphQLNonNull(TimePeriodType)
                }
            };
        }
    });
    const EntriesSortByType: GraphQLEnumType = new GraphQLEnumType({
        name: "EntriesSortBy",
        values: {
            NEW: {
                value: "NEW"
            },
            TOP: {
                value: "TOP"
            }
        }
    });
    const FirstPartyPromoType: GraphQLObjectType = new GraphQLObjectType({
        name: "FirstPartyPromo",
        fields() {
            return {
                backgroundImageUrl: {
                    name: "backgroundImageUrl",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                buttonText: {
                    name: "buttonText",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                description: {
                    name: "description",
                    type: new GraphQLList(new GraphQLNonNull(GraphQLString)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                href: {
                    name: "href",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                imageUrl: {
                    name: "imageUrl",
                    type: GraphQLString
                },
                title: {
                    name: "title",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const CommanderCalculatedStatsType: GraphQLObjectType = new GraphQLObjectType({
        name: "CommanderCalculatedStats",
        fields() {
            return {
                conversionRate: {
                    name: "conversionRate",
                    type: GraphQLFloat,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                count: {
                    name: "count",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                metaShare: {
                    name: "metaShare",
                    type: GraphQLFloat,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                topCuts: {
                    name: "topCuts",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const CommanderStatsFiltersType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "CommanderStatsFilters",
        fields() {
            return {
                colorId: {
                    name: "colorId",
                    type: GraphQLString
                },
                maxDate: {
                    name: "maxDate",
                    type: GraphQLString
                },
                maxSize: {
                    name: "maxSize",
                    type: GraphQLInt
                },
                minDate: {
                    name: "minDate",
                    type: GraphQLString
                },
                minSize: {
                    name: "minSize",
                    type: GraphQLInt
                },
                timePeriod: {
                    name: "timePeriod",
                    type: TimePeriodType
                }
            };
        }
    });
    const NodeType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "Node",
        fields() {
            return {
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLID)
                }
            };
        }
    });
    const CommanderType: GraphQLObjectType = new GraphQLObjectType({
        name: "Commander",
        fields() {
            return {
                breakdownUrl: {
                    name: "breakdownUrl",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                cardDetails: {
                    name: "cardDetails",
                    type: CommanderCardDetailsType,
                    args: {
                        cardName: {
                            type: GraphQLString
                        },
                        filters: {
                            type: EntriesFilterType
                        },
                        sortBy: {
                            type: new GraphQLNonNull(EntriesSortByType),
                            defaultValue: "TOP"
                        }
                    },
                    resolve(source, args) {
                        return source.cardDetails(args.cardName, args.filters, args.sortBy);
                    }
                },
                cards: {
                    name: "cards",
                    type: new GraphQLList(new GraphQLNonNull(CardType)),
                    resolve(source, _args, context) {
                        return assertNonNull(source.cards(createCommanderCardsLoader(context)));
                    }
                },
                colorId: {
                    name: "colorId",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                entries: {
                    name: "entries",
                    type: EntryConnectionType,
                    args: {
                        after: {
                            type: GraphQLString
                        },
                        filters: {
                            type: EntriesFilterType
                        },
                        first: {
                            type: new GraphQLNonNull(GraphQLInt),
                            defaultValue: 20
                        },
                        sortBy: {
                            type: new GraphQLNonNull(EntriesSortByType),
                            defaultValue: "TOP"
                        }
                    },
                    resolve(source, args) {
                        return assertNonNull(source.entries(args.first, args.after, args.filters, args.sortBy));
                    }
                },
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLID),
                    resolve(source) {
                        return commanderIdResolver(source);
                    }
                },
                name: {
                    name: "name",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                promo: {
                    name: "promo",
                    type: FirstPartyPromoType
                },
                staples: {
                    name: "staples",
                    type: new GraphQLList(new GraphQLNonNull(CardType)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                stats: {
                    name: "stats",
                    type: CommanderCalculatedStatsType,
                    args: {
                        filters: {
                            type: new GraphQLNonNull(CommanderStatsFiltersType)
                        }
                    },
                    resolve(source, args, context) {
                        return assertNonNull(source.stats(args.filters, commanderStatsLoader(context)));
                    }
                }
            };
        },
        interfaces() {
            return [NodeType];
        }
    });
    const PlayerType: GraphQLObjectType = new GraphQLObjectType({
        name: "Player",
        fields() {
            return {
                conversionRate: {
                    name: "conversionRate",
                    type: GraphQLFloat,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                draws: {
                    name: "draws",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                entries: {
                    name: "entries",
                    type: new GraphQLList(new GraphQLNonNull(EntryType)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLID),
                    resolve(source) {
                        return playerIdResolver(source);
                    }
                },
                isKnownCheater: {
                    name: "isKnownCheater",
                    type: GraphQLBoolean,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                losses: {
                    name: "losses",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                name: {
                    name: "name",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                topCuts: {
                    name: "topCuts",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                topdeckProfile: {
                    name: "topdeckProfile",
                    type: GraphQLString
                },
                winRate: {
                    name: "winRate",
                    type: GraphQLFloat,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                wins: {
                    name: "wins",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        },
        interfaces() {
            return [NodeType];
        }
    });
    const TournamentBreakdownGroupType: GraphQLObjectType = new GraphQLObjectType({
        name: "TournamentBreakdownGroup",
        fields() {
            return {
                commander: {
                    name: "commander",
                    type: CommanderType,
                    resolve(source, _args, context) {
                        return assertNonNull(source.commander(createCommanderLoader(context)));
                    }
                },
                commanderId: {
                    name: "commanderId",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                conversionRate: {
                    name: "conversionRate",
                    type: GraphQLFloat,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                entries: {
                    name: "entries",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                topCuts: {
                    name: "topCuts",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const TournamentType: GraphQLObjectType = new GraphQLObjectType({
        name: "Tournament",
        fields() {
            return {
                TID: {
                    name: "TID",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                bracketUrl: {
                    name: "bracketUrl",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                breakdown: {
                    name: "breakdown",
                    type: new GraphQLList(new GraphQLNonNull(TournamentBreakdownGroupType)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                entries: {
                    name: "entries",
                    type: new GraphQLList(new GraphQLNonNull(EntryType)),
                    args: {
                        commander: {
                            type: GraphQLString
                        },
                        maxStanding: {
                            type: GraphQLInt
                        }
                    },
                    resolve(source, args) {
                        return assertNonNull(source.entries(args.commander, args.maxStanding));
                    }
                },
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLID),
                    resolve(source) {
                        return tournamentIdResolver(source);
                    }
                },
                name: {
                    name: "name",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                promo: {
                    name: "promo",
                    type: FirstPartyPromoType
                },
                size: {
                    name: "size",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                swissRounds: {
                    name: "swissRounds",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                topCut: {
                    name: "topCut",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                tournamentDate: {
                    name: "tournamentDate",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        },
        interfaces() {
            return [NodeType];
        }
    });
    const EntryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Entry",
        fields() {
            return {
                commander: {
                    name: "commander",
                    type: CommanderType,
                    resolve(source, _args, context) {
                        return assertNonNull(source.commander(createCommanderLoader(context)));
                    }
                },
                decklist: {
                    name: "decklist",
                    type: GraphQLString
                },
                draws: {
                    name: "draws",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLID),
                    resolve(source) {
                        return entryIdResolver(source);
                    }
                },
                losses: {
                    name: "losses",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                lossesBracket: {
                    name: "lossesBracket",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                lossesSwiss: {
                    name: "lossesSwiss",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                maindeck: {
                    name: "maindeck",
                    type: new GraphQLList(new GraphQLNonNull(CardType)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                player: {
                    name: "player",
                    type: PlayerType,
                    resolve(source, _args, context) {
                        return assertNonNull(source.player(createPlayerLoader(context)));
                    }
                },
                standing: {
                    name: "standing",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                tournament: {
                    name: "tournament",
                    type: TournamentType,
                    resolve(source, _args, context) {
                        return assertNonNull(source.tournament(createTournamentLoader(context)));
                    }
                },
                winRate: {
                    name: "winRate",
                    type: GraphQLFloat
                },
                wins: {
                    name: "wins",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                winsBracket: {
                    name: "winsBracket",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                winsSwiss: {
                    name: "winsSwiss",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        },
        interfaces() {
            return [NodeType];
        }
    });
    const EntryEdgeType: GraphQLObjectType = new GraphQLObjectType({
        name: "EntryEdge",
        fields() {
            return {
                cursor: {
                    name: "cursor",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                node: {
                    name: "node",
                    type: EntryType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const PageInfoType: GraphQLObjectType = new GraphQLObjectType({
        name: "PageInfo",
        fields() {
            return {
                endCursor: {
                    name: "endCursor",
                    type: GraphQLString
                },
                hasNextPage: {
                    name: "hasNextPage",
                    type: GraphQLBoolean,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                hasPreviousPage: {
                    name: "hasPreviousPage",
                    type: GraphQLBoolean,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                startCursor: {
                    name: "startCursor",
                    type: GraphQLString
                }
            };
        }
    });
    const EntryConnectionType: GraphQLObjectType = new GraphQLObjectType({
        name: "EntryConnection",
        fields() {
            return {
                edges: {
                    name: "edges",
                    type: new GraphQLList(new GraphQLNonNull(EntryEdgeType)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                pageInfo: {
                    name: "pageInfo",
                    type: PageInfoType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const CardEntriesFiltersType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "CardEntriesFilters",
        fields() {
            return {
                colorId: {
                    name: "colorId",
                    type: GraphQLString
                },
                commanderName: {
                    name: "commanderName",
                    type: GraphQLString
                },
                tournamentTID: {
                    name: "tournamentTID",
                    type: GraphQLString
                }
            };
        }
    });
    const CardType: GraphQLObjectType = new GraphQLObjectType({
        name: "Card",
        fields() {
            return {
                cardPreviewImageUrl: {
                    description: "Image of the full front card face.",
                    name: "cardPreviewImageUrl",
                    type: GraphQLString
                },
                cmc: {
                    name: "cmc",
                    type: GraphQLInt,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                colorId: {
                    name: "colorId",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                entries: {
                    name: "entries",
                    type: EntryConnectionType,
                    args: {
                        after: {
                            type: GraphQLString
                        },
                        filters: {
                            type: CardEntriesFiltersType
                        },
                        first: {
                            type: new GraphQLNonNull(GraphQLInt),
                            defaultValue: 20
                        }
                    },
                    resolve(source, args) {
                        return assertNonNull(source.entries(args.first, args.after, args.filters));
                    }
                },
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLID),
                    resolve(source) {
                        return cardIdResolver(source);
                    }
                },
                imageUrls: {
                    description: "URL's of art crops for each card face.",
                    name: "imageUrls",
                    type: new GraphQLList(new GraphQLNonNull(GraphQLString)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                name: {
                    name: "name",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                oracleId: {
                    name: "oracleId",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                playRateLastYear: {
                    name: "playRateLastYear",
                    type: GraphQLFloat,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                scryfallUrl: {
                    description: "Link to the card on Scryfall.",
                    name: "scryfallUrl",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                type: {
                    name: "type",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        },
        interfaces() {
            return [NodeType];
        }
    });
    const CommanderEdgeType: GraphQLObjectType = new GraphQLObjectType({
        name: "CommanderEdge",
        fields() {
            return {
                cursor: {
                    name: "cursor",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                node: {
                    name: "node",
                    type: CommanderType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const CommanderConnectionType: GraphQLObjectType = new GraphQLObjectType({
        name: "CommanderConnection",
        fields() {
            return {
                edges: {
                    name: "edges",
                    type: new GraphQLList(new GraphQLNonNull(CommanderEdgeType)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                pageInfo: {
                    name: "pageInfo",
                    type: PageInfoType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const CommandersSortByType: GraphQLEnumType = new GraphQLEnumType({
        name: "CommandersSortBy",
        values: {
            CONVERSION: {
                value: "CONVERSION"
            },
            POPULARITY: {
                value: "POPULARITY"
            },
            TOP_CUTS: {
                value: "TOP_CUTS"
            }
        }
    });
    const SearchResultType: GraphQLObjectType = new GraphQLObjectType({
        name: "SearchResult",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                url: {
                    name: "url",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const SearchResultTypeType: GraphQLEnumType = new GraphQLEnumType({
        name: "SearchResultType",
        values: {
            COMMANDER: {
                value: "COMMANDER"
            },
            TOURNAMENT: {
                value: "TOURNAMENT"
            }
        }
    });
    const TournamentEdgeType: GraphQLObjectType = new GraphQLObjectType({
        name: "TournamentEdge",
        fields() {
            return {
                cursor: {
                    name: "cursor",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                node: {
                    name: "node",
                    type: TournamentType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const TournamentConnectionType: GraphQLObjectType = new GraphQLObjectType({
        name: "TournamentConnection",
        fields() {
            return {
                edges: {
                    name: "edges",
                    type: new GraphQLList(new GraphQLNonNull(TournamentEdgeType)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                pageInfo: {
                    name: "pageInfo",
                    type: PageInfoType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const TournamentFiltersType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "TournamentFilters",
        fields() {
            return {
                maxDate: {
                    name: "maxDate",
                    type: GraphQLString
                },
                maxSize: {
                    name: "maxSize",
                    type: GraphQLInt
                },
                minDate: {
                    name: "minDate",
                    type: GraphQLString
                },
                minSize: {
                    name: "minSize",
                    type: GraphQLInt
                },
                timePeriod: {
                    name: "timePeriod",
                    type: TimePeriodType
                }
            };
        }
    });
    const TournamentSortByType: GraphQLEnumType = new GraphQLEnumType({
        name: "TournamentSortBy",
        values: {
            DATE: {
                value: "DATE"
            },
            PLAYERS: {
                value: "PLAYERS"
            }
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                card: {
                    name: "card",
                    type: CardType,
                    args: {
                        name: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return assertNonNull(queryCardResolver.card(args.name));
                    }
                },
                cheaters: {
                    name: "cheaters",
                    type: new GraphQLList(new GraphQLNonNull(PlayerType)),
                    resolve() {
                        return assertNonNull(queryCheatersResolver.cheaters());
                    }
                },
                commander: {
                    name: "commander",
                    type: CommanderType,
                    args: {
                        name: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return assertNonNull(queryCommanderResolver.commander(args.name));
                    }
                },
                commanders: {
                    name: "commanders",
                    type: CommanderConnectionType,
                    args: {
                        after: {
                            type: GraphQLString
                        },
                        colorId: {
                            type: GraphQLString
                        },
                        first: {
                            type: new GraphQLNonNull(GraphQLInt),
                            defaultValue: 20
                        },
                        minEntries: {
                            type: GraphQLInt
                        },
                        minTournamentSize: {
                            type: GraphQLInt
                        },
                        sortBy: {
                            type: new GraphQLNonNull(CommandersSortByType),
                            defaultValue: "CONVERSION"
                        },
                        timePeriod: {
                            type: new GraphQLNonNull(TimePeriodType),
                            defaultValue: "ONE_MONTH"
                        }
                    },
                    resolve(_source, args) {
                        return assertNonNull(queryCommandersResolver.commanders(args.first, args.after, args.minEntries, args.minTournamentSize, args.timePeriod, args.sortBy, args.colorId));
                    }
                },
                node: {
                    name: "node",
                    type: NodeType,
                    args: {
                        id: {
                            type: new GraphQLNonNull(GraphQLID)
                        }
                    },
                    resolve(_source, args, context) {
                        return queryNodeResolver(args.id, createCommanderLoader(context), createEntryLoader(context), createTournamentLoader(context), createCardLoader(context), createPlayerLoader(context));
                    }
                },
                player: {
                    name: "player",
                    type: PlayerType,
                    args: {
                        profile: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return assertNonNull(queryPlayerResolver.player(args.profile));
                    }
                },
                searchResults: {
                    name: "searchResults",
                    type: new GraphQLList(new GraphQLNonNull(SearchResultType)),
                    args: {
                        types: {
                            type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(SearchResultTypeType)))
                        }
                    },
                    resolve(_source, args) {
                        return assertNonNull(querySearchResultsResolver(args.types));
                    }
                },
                staples: {
                    name: "staples",
                    type: new GraphQLList(new GraphQLNonNull(CardType)),
                    args: {
                        colorId: {
                            type: GraphQLString
                        },
                        type: {
                            type: GraphQLString
                        }
                    },
                    resolve(_source, args) {
                        return assertNonNull(queryStaplesResolver.staples(args.colorId, args.type));
                    }
                },
                tournament: {
                    name: "tournament",
                    type: TournamentType,
                    args: {
                        TID: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return assertNonNull(queryTournamentResolver.tournament(args.TID));
                    }
                },
                tournaments: {
                    name: "tournaments",
                    type: TournamentConnectionType,
                    args: {
                        after: {
                            type: GraphQLString
                        },
                        filters: {
                            type: TournamentFiltersType
                        },
                        first: {
                            type: new GraphQLNonNull(GraphQLInt),
                            defaultValue: 20
                        },
                        sortBy: {
                            type: new GraphQLNonNull(TournamentSortByType),
                            defaultValue: "DATE"
                        }
                    },
                    resolve(_source, args) {
                        return assertNonNull(queryTournamentsResolver.tournaments(args.first, args.after, args.filters, args.sortBy));
                    }
                }
            };
        }
    });
    const EntrySortByType: GraphQLEnumType = new GraphQLEnumType({
        name: "EntrySortBy",
        values: {
            DATE: {
                value: "DATE"
            },
            DRAWS: {
                value: "DRAWS"
            },
            LOSSES: {
                value: "LOSSES"
            },
            STANDING: {
                value: "STANDING"
            },
            WINRATE: {
                value: "WINRATE"
            },
            WINS: {
                value: "WINS"
            }
        }
    });
    const SortDirectionType: GraphQLEnumType = new GraphQLEnumType({
        name: "SortDirection",
        values: {
            ASC: {
                value: "ASC"
            },
            DESC: {
                value: "DESC"
            }
        }
    });
    const EntryFiltersType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "EntryFilters",
        fields() {
            return {
                maxDate: {
                    name: "maxDate",
                    type: GraphQLString
                },
                maxDraws: {
                    name: "maxDraws",
                    type: GraphQLInt
                },
                maxLosses: {
                    name: "maxLosses",
                    type: GraphQLInt
                },
                maxSize: {
                    name: "maxSize",
                    type: GraphQLInt
                },
                maxStanding: {
                    name: "maxStanding",
                    type: GraphQLInt
                },
                maxWins: {
                    name: "maxWins",
                    type: GraphQLInt
                },
                minDate: {
                    name: "minDate",
                    type: GraphQLString
                },
                minDraws: {
                    name: "minDraws",
                    type: GraphQLInt
                },
                minLosses: {
                    name: "minLosses",
                    type: GraphQLInt
                },
                minSize: {
                    name: "minSize",
                    type: GraphQLInt
                },
                minStanding: {
                    name: "minStanding",
                    type: GraphQLInt
                },
                minWins: {
                    name: "minWins",
                    type: GraphQLInt
                }
            };
        }
    });
    return new GraphQLSchema({
        directives: [new GraphQLDirective({
                name: "semanticNonNull",
                locations: [DirectiveLocation.FIELD_DEFINITION],
                description: "Indicates that a position is semantically non null: it is only null if there is a matching error in the `errors` array.\nIn all other cases, the position is non-null.\n\nTools doing code generation may use this information to generate the position as non-null if field errors are handled out of band:\n\n```graphql\ntype User {\n    # email is semantically non-null and can be generated as non-null by error-handling clients.\n    email: String @semanticNonNull\n}\n```\n\nThe `levels` argument indicates what levels are semantically non null in case of lists:\n\n```graphql\ntype User {\n    # friends is semantically non null\n    friends: [User] @semanticNonNull # same as @semanticNonNull(levels: [0])\n\n    # every friends[k] is semantically non null\n    friends: [User] @semanticNonNull(levels: [1])\n\n    # friends as well as every friends[k] is semantically non null\n    friends: [User] @semanticNonNull(levels: [0, 1])\n}\n```\n\n`levels` are zero indexed.\nPassing a negative level or a level greater than the list dimension is an error.",
                args: {
                    levels: {
                        type: new GraphQLList(GraphQLInt),
                        defaultValue: [0]
                    }
                }
            })],
        query: QueryType,
        types: [CommandersSortByType, EntriesSortByType, EntrySortByType, SearchResultTypeType, SortDirectionType, TimePeriodType, TournamentSortByType, NodeType, CardEntriesFiltersType, CommanderStatsFiltersType, EntriesFilterType, EntryFiltersType, TournamentFiltersType, CardType, CommanderType, CommanderCalculatedStatsType, CommanderCardDetailsType, CommanderCardWinRatePointType, CommanderConnectionType, CommanderEdgeType, EntryType, EntryConnectionType, EntryEdgeType, FirstPartyPromoType, PageInfoType, PlayerType, QueryType, SearchResultType, TournamentType, TournamentBreakdownGroupType, TournamentConnectionType, TournamentEdgeType]
    });
}
