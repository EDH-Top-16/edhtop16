type Card implements Node {
  """
  Image of the full front card face.
  """
  cardPreviewImageUrl: String
  cmc: Int!
  colorId: String!
  entries(
    after: String
    before: String
    filters: CardEntriesFilters
    first: Int
    last: Int
  ): CardEntriesConnection!
  id: ID!

  """
  URL's of art crops for each card face.
  """
  imageUrls: [String!]!
  name: String!
  oracleId: String!

  """
  Link to the card on Scryfall.
  """
  scryfallUrl: String!
  type: String!
}

type CardEntriesConnection {
  edges: [CardEntriesConnectionEdge!]!
  pageInfo: PageInfo!
}

type CardEntriesConnectionEdge {
  cursor: String!
  node: Entry!
}

input CardEntriesFilters {
  colorId: String
  commanderName: String
  tournamentTID: String
}

type Commander implements Node {
  breakdownUrl: String!
  cards: [Card!]!
  colorId: String!
  entries(
    after: String
    before: String
    filters: EntriesFilter
    first: Int
    last: Int
    sortBy: EntriesSortBy = TOP
  ): CommanderEntriesConnection!
  filteredStats(
    maxStanding: Int
    minEventSize: Int
    timePeriod: TimePeriod!
  ): CommanderStats!
  id: ID!
  name: String!
  promo: FirstPartyPromo
  staples(
    after: String
    before: String
    first: Int
    last: Int
  ): CommanderStaplesConnection!
  stats: CommanderStats!
}

type CommanderEntriesConnection {
  edges: [CommanderEntriesConnectionEdge!]!
  pageInfo: PageInfo!
}

type CommanderEntriesConnectionEdge {
  cursor: String!
  node: Entry!
}

type CommanderStaplesConnection {
  edges: [CommanderStaplesConnectionEdge!]!
  pageInfo: PageInfo!
}

type CommanderStaplesConnectionEdge {
  cursor: String!
  node: Card!
}

type CommanderStats {
  conversionRate: Float!
  count: Int!
  metaShare: Float!
  topCutBias: Float!
  topCuts: Int!
}

input CommanderStatsFilters {
  colorId: String
  maxDate: String
  maxSize: Int
  minDate: String
  minSize: Int
  timePeriod: TimePeriod
}

enum CommandersSortBy {
  CONVERSION
  POPULARITY
  TOP_CUTS
}

input EntriesFilter {
  maxStanding: Int
  minEventSize: Int = 60
  timePeriod: TimePeriod = ALL_TIME
}

enum EntriesSortBy {
  NEW
  TOP
}

type Entry implements Node {
  commander: Commander!
  decklist: String
  draws: Int!
  id: ID!
  losses: Int!
  lossesBracket: Int!
  lossesSwiss: Int!
  maindeck: [Card!]!
  player: Player
  standing: Int!
  tables: [TopdeckTournamentTable!]!
  tournament: Tournament!
  winRate: Float
  wins: Int!
  winsBracket: Int!
  winsSwiss: Int!
}

input EntryFilters {
  maxDate: String
  maxDraws: Int
  maxLosses: Int
  maxSize: Int
  maxStanding: Int
  maxWins: Int
  minDate: String
  minDraws: Int
  minLosses: Int
  minSize: Int
  minStanding: Int
  minWins: Int
}

enum EntrySortBy {
  DATE
  DRAWS
  LOSSES
  STANDING
  WINRATE
  WINS
}

type FirstPartyPromo {
  backgroundImageUrl: String!
  buttonText: String!
  description: [String!]!
  href: String!
  imageUrl: String
  title: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Player implements Node {
  conversionRate: Float!
  draws: Int!
  entries: [Entry!]!
  id: ID!
  isKnownCheater: Boolean!
  losses: Int!
  name: String!
  topCuts: Int!
  topdeckProfile: String
  winRate: Float!
  wins: Int!
}

type Query {
  card(name: String!): Card!
  cheaters: [Player!]!
  commander(name: String!): Commander!
  commanders(
    after: String
    before: String
    colorId: String
    first: Int
    last: Int
    minEntries: Int
    minTournamentSize: Int
    sortBy: CommandersSortBy = CONVERSION
    timePeriod: TimePeriod = ONE_MONTH
  ): QueryCommandersConnection!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  player(profile: String!): Player!
  searchResults(types: [SearchResultType!]): [SearchResult!]!
  staples: [Card!]!
  tournament(TID: String!): Tournament!
  tournaments(
    after: String
    before: String
    filters: TournamentFilters
    first: Int
    last: Int
    search: String
    sortBy: TournamentSortBy = DATE
  ): QueryTournamentsConnection!
}

type QueryCommandersConnection {
  edges: [QueryCommandersConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryCommandersConnectionEdge {
  cursor: String!
  node: Commander!
}

type QueryTournamentsConnection {
  edges: [QueryTournamentsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryTournamentsConnectionEdge {
  cursor: String!
  node: Tournament!
}

type SearchResult {
  name: String!
  url: String!
}

enum SearchResultType {
  COMMANDER
  TOURNAMENT
}

enum SortDirection {
  ASC
  DESC
}

enum TimePeriod {
  ALL_TIME
  ONE_MONTH
  ONE_YEAR
  POST_BAN
  SIX_MONTHS
  THREE_MONTHS
}

type TopdeckTournamentRound {
  round: String!
  tables: [TopdeckTournamentTable!]!
}

type TopdeckTournamentTable {
  entries: [Entry!]!
  roundName: String!
  table: Int!
  winner: Entry
  winnerSeatPosition: Int
}

type Tournament implements Node {
  TID: String!
  bracketUrl: String!
  breakdown: [TournamentBreakdownGroup!]!
  entries(commander: String, maxStanding: Int): [Entry!]!
  id: ID!
  name: String!
  promo: FirstPartyPromo
  rounds: [TopdeckTournamentRound!]!
  size: Int!
  swissRounds: Int!
  topCut: Int!
  tournamentDate: String!
}

type TournamentBreakdownGroup {
  commander: Commander!
  conversionRate: Float!
  entries: Int!
  topCuts: Int!
}

input TournamentFilters {
  maxDate: String
  maxSize: Int
  minDate: String
  minSize: Int
  timePeriod: TimePeriod
}

enum TournamentSortBy {
  DATE
  PLAYERS
}
