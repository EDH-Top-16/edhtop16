/**
 * @fileoverview Router Code Generator
 *
 * This script generates type-safe router configuration files by scanning TypeScript
 * source code for JSDoc annotations. It's part of the "Pastoria" routing framework.
 *
 * How it works:
 * 1. Scans all TypeScript files in the project for exported functions/classes
 * 2. Looks for JSDoc tags: @route, @resource, and @param
 * 3. Generates three files from templates:
 *    - js_resource.ts: Resource configuration for lazy loading
 *    - router.tsx: Client-side router with type-safe routes
 *    - server_router.ts: Server-side router configuration
 *
 * Usage:
 * - Add @route <route-name> to functions to create routes
 * - Add @param <name> <type> to document route parameters
 * - Add @resource <resource-name> to exports for lazy loading
 *
 * The generator automatically creates Zod schemas for route parameters based on
 * TypeScript types, enabling runtime validation and type safety.
 */

import {readFile} from 'node:fs/promises';
import * as path from 'node:path';
import {default as pc} from 'picocolors';
import {Project, SourceFile, Symbol, SyntaxKind, ts, TypeFlags} from 'ts-morph';

const JS_RESOURCE_FILENAME = '__generated__/router/js_resource.ts';
const JS_RESOURCE_TEMPLATE = path.join(
  path.dirname(new URL(import.meta.url).pathname),
  '../templates/js_resource.ts',
);

const ROUTER_FILENAME = '__generated__/router/router.tsx';
const ROUTER_TEMPLATE = path.join(
  path.dirname(new URL(import.meta.url).pathname),
  '../templates/router.tsx',
);

async function loadRouterFiles(project: Project) {
  async function loadSourceFile(fileName: string, templateFileName: string) {
    const template = await readFile(templateFileName, 'utf-8');
    const warningComment = `/*
 * This file was generated by \`pastoria\`.
 * Do not modify this file directly. Instead, edit the template at ${path.basename(templateFileName)}.
 */

`;
    return project.createSourceFile(fileName, warningComment + template, {
      overwrite: true,
    });
  }

  const [jsResource, router] = await Promise.all([
    loadSourceFile(JS_RESOURCE_FILENAME, JS_RESOURCE_TEMPLATE),
    loadSourceFile(ROUTER_FILENAME, ROUTER_TEMPLATE),
  ]);

  return {jsResource, router} as const;
}

type RouterResource = {
  resourceName: string;
  sourceFile: SourceFile;
  symbol: Symbol;
};

type RouterRoute = {
  routeName: string;
  sourceFile: SourceFile;
  symbol: Symbol;
  params: Map<string, ts.Type>;
};

function collectRouterNodes(project: Project) {
  const resources: RouterResource[] = [];
  const routes: RouterRoute[] = [];

  function visitRouterNodes(sourceFile: SourceFile) {
    // TODO: Skip sourceFile if regex isn't used at all.
    sourceFile.getExportSymbols().forEach((symbol) => {
      let routerResource = null as RouterResource | null;
      let routerRoute = null as RouterRoute | null;
      const routeParams = new Map<string, ts.Type>();

      function visitJSDocTags(tag: ts.JSDoc | ts.JSDocTag) {
        if (ts.isJSDoc(tag)) {
          tag.tags?.forEach(visitJSDocTags);
        } else if (ts.isJSDocParameterTag(tag)) {
          const typeNode = tag.typeExpression?.type;
          const tc = project.getTypeChecker().compilerObject;

          const type =
            typeNode == null
              ? tc.getUnknownType()
              : tc.getTypeFromTypeNode(typeNode);

          routeParams.set(tag.name.getText(), type);
        } else if (typeof tag.comment === 'string') {
          switch (tag.tagName.getText()) {
            case 'route': {
              routerRoute = {
                routeName: tag.comment,
                sourceFile,
                symbol,
                params: routeParams,
              };
              break;
            }
            case 'resource': {
              routerResource = {
                resourceName: tag.comment,
                sourceFile,
                symbol,
              };
              break;
            }
          }
        }
      }

      symbol
        .getDeclarations()
        .flatMap((decl) => ts.getJSDocCommentsAndTags(decl.compilerNode))
        .forEach(visitJSDocTags);

      if (routerRoute != null) routes.push(routerRoute);
      if (routerResource != null) resources.push(routerResource);
    });
  }

  project.getSourceFiles().forEach(visitRouterNodes);
  return {resources, routes} as const;
}

function zodSchemaOfType(tc: ts.TypeChecker, t: ts.Type): string {
  if (t.getFlags() & TypeFlags.String) {
    return `z.pipe(z.string(), z.transform(decodeURIComponent))`;
  } else if (t.getFlags() & TypeFlags.Number) {
    return `z.coerce.number<number>()`;
  } else if (t.getFlags() & TypeFlags.Null) {
    return `z.preprocess(s => s == null ? undefined : s, z.undefined())`;
  } else if (t.isUnion()) {
    const isRepresentingOptional =
      t.types.length === 2 &&
      t.types.some((s) => s.getFlags() & TypeFlags.Null);

    if (isRepresentingOptional) {
      const nonOptionalType = t.types.find(
        (s) => !(s.getFlags() & TypeFlags.Null),
      )!;

      return `z.pipe(z.nullish(${zodSchemaOfType(tc, nonOptionalType)}), z.transform(s => s == null ? undefined : s))`;
    } else {
      return `z.union([${t.types.map((it) => zodSchemaOfType(tc, it)).join(', ')}])`;
    }
  } else if (tc.isArrayLikeType(t)) {
    const typeArg = tc.getTypeArguments(t as ts.TypeReference)[0];
    const argZodSchema =
      typeArg == null ? `z.any()` : zodSchemaOfType(tc, typeArg);

    return `z.array(${argZodSchema})`;
  } else {
    console.log('Could not handle type:', tc.typeToString(t));
    return `z.any()`;
  }
}

export async function generatePastoriaArtifacts() {
  const targetDir = process.cwd();
  const project = new Project({
    tsConfigFilePath: path.join(targetDir, 'tsconfig.json'),
  });

  const tc = project.getTypeChecker().compilerObject;
  const routerFiles = await loadRouterFiles(project);
  const routerNodes = collectRouterNodes(project);

  const resourceConf = routerFiles.jsResource
    .getVariableDeclarationOrThrow('RESOURCE_CONF')
    .getInitializerIfKindOrThrow(SyntaxKind.AsExpression)
    .getExpressionIfKindOrThrow(SyntaxKind.ObjectLiteralExpression);

  resourceConf.getPropertyOrThrow('noop').remove();
  for (const {resourceName, sourceFile, symbol} of routerNodes.resources) {
    const filePath = path.relative(process.cwd(), sourceFile.getFilePath());
    const moduleSpecifier =
      routerFiles.jsResource.getRelativePathAsModuleSpecifierTo(
        sourceFile.getFilePath(),
      );

    resourceConf.addPropertyAssignment({
      name: `"${resourceName}"`,
      initializer: (writer) => {
        writer.block(() => {
          writer
            .writeLine(`src: "${filePath}",`)
            .writeLine(
              `loader: () => import("${moduleSpecifier}").then(m => m.${symbol.getName()})`,
            );
        });
      },
    });

    console.log(
      'Created resource',
      pc.cyan(resourceName),
      'for',
      pc.green(symbol.getName()),
      'exported from',
      pc.yellow(filePath),
    );
  }

  const routerConf = routerFiles.router
    .getVariableDeclarationOrThrow('ROUTER_CONF')
    .getInitializerIfKindOrThrow(SyntaxKind.AsExpression)
    .getExpressionIfKindOrThrow(SyntaxKind.ObjectLiteralExpression);

  routerConf.getPropertyOrThrow('noop').remove();

  let entryPointImportIndex = 0;
  for (const {routeName, sourceFile, symbol, params} of routerNodes.routes) {
    const importAlias = `e${entryPointImportIndex++}`;
    const filePath = path.relative(process.cwd(), sourceFile.getFilePath());
    const moduleSpecifier =
      routerFiles.router.getRelativePathAsModuleSpecifierTo(
        sourceFile.getFilePath(),
      );

    routerFiles.router.addImportDeclaration({
      moduleSpecifier,
      namedImports: [
        {
          name: symbol.getName(),
          alias: importAlias,
        },
      ],
    });

    routerConf.addPropertyAssignment({
      name: `"${routeName}"`,
      initializer: (writer) => {
        writer
          .write('{')
          .indent(() => {
            writer.writeLine(`entrypoint: ${importAlias},`);
            if (params.size === 0) {
              writer.writeLine(`schema: z.object({})`);
            } else {
              writer.writeLine(`schema: z.object({`);
              for (const [paramName, paramType] of Array.from(params)) {
                writer.writeLine(
                  `  ${paramName}: ${zodSchemaOfType(tc, paramType)},`,
                );
              }

              writer.writeLine('})');
            }
          })
          .write('} as const');
      },
    });

    console.log(
      'Created route',
      pc.cyan(routeName),
      'for',
      pc.green(symbol.getName()),
      'exported from',
      pc.yellow(filePath),
    );
  }

  await Promise.all([routerFiles.jsResource.save(), routerFiles.router.save()]);
}
