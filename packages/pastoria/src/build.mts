import react from '@vitejs/plugin-react';
import tailwindcss from '@tailwindcss/vite';
import {cjsInterop} from 'vite-plugin-cjs-interop';
import {build, type BuildEnvironmentOptions, type Plugin} from 'vite';

const PASTORIA_CLIENT_ENTRY = `// Generated by Pastoria.
import {createRouterApp} from '#genfiles/router/router';
import {App} from '#src/pages/_app';
import {hydrateRoot} from 'react-dom/client';

async function main() {
  const RouterApp = await createRouterApp();
  hydrateRoot(document, <RouterApp App={App} />);
}

main();
`;

const PASTORIA_ENTRY_SERVER = `// Generated by Pastoria.
import {JSResource} from '#genfiles/router/js_resource';
import {
  listRoutes,
  router__createAppFromEntryPoint,
  router__loadEntryPoint,
} from '#genfiles/router/router';
import {getSchema} from '#genfiles/schema/schema';
import {Context} from '#src/lib/server/context';
import {App} from '#src/pages/_app';
import {GraphQLSchema, specifiedDirectives} from 'graphql';
import {createRouterHandler} from 'pastoria-runtime/server';
import type {Manifest} from 'vite';

const schemaConfig = getSchema().toConfig();
const schema = new GraphQLSchema({
  ...schemaConfig,
  directives: [...specifiedDirectives, ...schemaConfig.directives],
});

export function createHandler(
  persistedQueries: Record<string, string>,
  manifest?: Manifest,
) {
  return createRouterHandler(
    listRoutes(),
    JSResource.srcOfModuleId,
    router__loadEntryPoint,
    router__createAppFromEntryPoint,
    App,
    schema,
    () => new Context(),
    persistedQueries,
    manifest,
  );
}
`;

function pastoriaEntryPlugin(): Plugin {
  const clientEntryModuleId = 'virtual:pastoria-entry-client.tsx';
  const serverEntryModuleId = 'virtual:pastoria-entry-server.tsx';

  return {
    name: 'pastoria-entry',
    resolveId(id) {
      if (id === clientEntryModuleId) {
        return clientEntryModuleId; // Return without \0 prefix so React plugin can see .tsx extension
      } else if (id === serverEntryModuleId) {
        return serverEntryModuleId;
      }
    },
    load(id) {
      if (id === clientEntryModuleId) {
        return PASTORIA_CLIENT_ENTRY;
      } else if (id === serverEntryModuleId) {
        return PASTORIA_ENTRY_SERVER;
      }
    },
  };
}

export const CLIENT_BUILD: BuildEnvironmentOptions = {
  outDir: 'dist/client',
  rollupOptions: {
    input: 'virtual:pastoria-entry-client.tsx',
  },
};

export const SERVER_BUILD: BuildEnvironmentOptions = {
  outDir: 'dist/server',
  ssr: true,
  rollupOptions: {
    input: 'virtual:pastoria-entry-server.tsx',
  },
};

export function createBuildConfig(buildEnv: BuildEnvironmentOptions) {
  return {
    appType: 'custom' as const,
    build: {
      ...buildEnv,
      assetsInlineLimit: 0,
      manifest: true,
      ssrManifest: true,
    },
    plugins: [
      pastoriaEntryPlugin(),
      tailwindcss(),
      react({babel: {plugins: ['relay']}}),
      cjsInterop({
        dependencies: ['react-relay', 'react-relay/hooks', 'relay-runtime'],
      }),
    ],
  };
}

export async function createBuild() {
  const clientBuild = await build({
    ...createBuildConfig(CLIENT_BUILD),
    configFile: false,
  });

  const serverBuild = await build({
    ...createBuildConfig(SERVER_BUILD),
    configFile: false,
  });
}
